@page "/zipcodes"
@page "/zipcodes/{area}"
@using System.Text.Json
@using ZIPCodePH.Common.ViewModels
@inject NavigationManager Navigation
@inject IHttpClientFactory ClientFactory

<PageTitle>ZIP Codes</PageTitle>

@if (!string.IsNullOrWhiteSpace(Area))
{
    <h2>@Area</h2>
}

@if (_zipCodes is null)
{
    <p>Failed to Fetch Data</p>
}
else
{
    <div class="row">
        @foreach (var codes in _zipCodes)
        {
            <div class="list-group">
                <div class="list-group-item">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-2">
                                @codes.Code
                            </div>
                            <div class="col-md-8">
                                @codes.Town
                            </div>
                            @* <div class="col-3"> *@
                            @*     @codes.Area.Name *@
                            @* </div> *@
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {

    // private IEnumerable<AreaViewModel>? areas = [];
    private IEnumerable<ZipCodeViewModel>? _zipCodes = [];

    private async Task GetZipCodesByAreasAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            $"https://localhost:5186/api/zipcodes/{Area}");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);

        Console.WriteLine(response.IsSuccessStatusCode);

        if (response.IsSuccessStatusCode)
        {
            await using var responseStream = await response.Content.ReadAsStreamAsync();
            _zipCodes = await JsonSerializer.DeserializeAsync<IEnumerable<ZipCodeViewModel>>(responseStream);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Area = Area ?? "";
        Console.WriteLine("Parameter: " + Area);

        if (!string.IsNullOrWhiteSpace(Area))
        {
            await GetZipCodesByAreasAsync();
        }
        else
        {
            Navigation.NavigateTo("/areas/");
        }
    }

    [Parameter] public string? Area { get; set; }
}