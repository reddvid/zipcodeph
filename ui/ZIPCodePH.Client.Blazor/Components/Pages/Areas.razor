@page "/areas"
@page "/areas/{group}"
@using System.Text.Json
@using ZIPCodePH.Common.Models
@using ZIPCodePH.Common.ViewModels
@using ZIPCodePH.DataContext.Entities
@inject IHttpClientFactory ClientFactory
@rendermode @(new InteractiveServerRenderMode(prerender: true))
<PageTitle>Areas</PageTitle>

@if (!string.IsNullOrWhiteSpace(Group))
{
    @if (Group.ToLower().StartsWith("n"))
    {
        <h2>
            National Capital Region
        </h2>
    }
    else
    {
        <h2>
            @string.Join("", new[] { @Group.Substring(0, 1).ToUpper(), @Group.Substring(1) })
        </h2>
    }
}

@if (areas is null || groups is null)
{
    <p>Failed to Fetch Data</p>
}
else
{
    <div class="row">
        <div class="col-md-5 col-sm-12">
            <AutoComplete TItem="ZipCodeViewModel"
                          @bind-Value="townName"
                          DataProvider="ZipsDataProvider"
                          StringComparison="StringComparison.OrdinalIgnoreCase"
                          StringFilterOperator="StringFilterOperator.StartsWith"
                          PropertyName="Town"
                          Placeholder="Search towns or cities..."
                          OnChanged="(ZipCodeViewModel zip) => OnAutoCompleteChanged(zip)"/>
        </div>
    </div>
    <!-- Showing All Areas By Group -->
    <div class="row">
        @if (string.IsNullOrWhiteSpace(Group))
        {
            foreach (var group in groups)
            {
                <div class="col-md-auto">
                    <h4>Towns/Cities in <a class="alert-link" href="/areas/@group.Name">@group.Name</a></h4>
                    <div class="list-group">
                        @foreach (var area in areas)
                        {
                            if (area.Group.Name != group.Name) continue;
                            <a href="/zipcodes/@area.Name" class="list-group-item">
                                @area.Name
                            </a>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <div class="row">
                <div class="list-group">
                    @foreach (var area in areas)
                    {
                        if (area.Group.Name.ToLower() != Group.ToLower()) continue;
                        <a href="/zipcodes/@area.Name" class="list-group-item">
                            @area.Name
                        </a>
                    }
                </div>
            </div>
        }
    </div>
}

@code {
    private IEnumerable<GroupViewModel>? groups = [];
    private IEnumerable<AreaViewModel>? areas = [];
    private string? townName;
    public IEnumerable<ZipCodeViewModel> zipcodes;

    private async Task<AutoCompleteDataProviderResult<ZipCodeViewModel>> ZipsDataProvider(AutoCompleteDataProviderRequest<ZipCodeViewModel> request)
    {
        Console.WriteLine("DataProvider");
        if (zipcodes is null || !zipcodes.Any())
        {
            zipcodes = await GetTownsAsync() ?? Array.Empty<ZipCodeViewModel>();
        }

        return await Task.FromResult(request.ApplyTo(zipcodes!.OrderBy(
            z => z.Town)));
    }

    private async Task<IEnumerable<ZipCodeViewModel>?> GetTownsAsync()
    {
        Console.WriteLine("Getting Towns");

        var request = new HttpRequestMessage(HttpMethod.Get,
            $"https://localhost:5186/api/zipcodes/all");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);

        Console.WriteLine("Towns: " + response.IsSuccessStatusCode);

        if (response.IsSuccessStatusCode)
        {
            await using var responseStream = await response.Content.ReadAsStreamAsync();
            return await JsonSerializer.DeserializeAsync<IEnumerable<ZipCodeViewModel>>(responseStream);
        }

        return [];
    }

    private void OnAutoCompleteChanged(ZipCodeViewModel? zipcode)
    {
        // TODO: handle your own logic
        if (zipcode is null)
            return;

        // NOTE: do null check
        Console.WriteLine($"'{zipcode?.Town}' selected.");
    }

    private async Task GetAreasAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            $"https://localhost:5186/api/areas");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            await using var responseStream = await response.Content.ReadAsStreamAsync();
            areas = await JsonSerializer.DeserializeAsync<IEnumerable<AreaViewModel>>(responseStream);
        }
    }

    private async Task GetGroupsAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://localhost:5186/api/groups");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);


        if (response.IsSuccessStatusCode)
        {
            await using var responseStream = await response.Content.ReadAsStreamAsync();
            groups = await JsonSerializer.DeserializeAsync<IEnumerable<GroupViewModel>>(responseStream);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Group = Group ?? "";
        Console.WriteLine("Parameter: " + Group);

        await GetGroupsAsync();
        await GetAreasAsync();
    }

    [Parameter] public string? Group { get; set; } = default!;


}